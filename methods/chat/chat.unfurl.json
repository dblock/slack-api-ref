{
  "group": "chat",
  "name": "chat.unfurl",
  "deprecated": false,
  "desc": "Provide custom unfurl behavior for user-posted URLs",
  "args": {
    "channel": {
      "required": true,
      "desc": "Channel ID of the message. Both `channel` and `ts` must be provided together, *or* `unfurl_id` and `source` must be provided together.",
      "type": "channel"
    },
    "source": {
      "required": false,
      "example": "composer",
      "desc": "The source of the link to unfurl. The source may either be `composer`, when the link is inside the message composer, or `conversations_history`, when the link has been posted to a conversation.",
      "type": "enum"
    },
    "ts": {
      "required": true,
      "desc": "Timestamp of the message to add unfurl behavior to.",
      "type": "timestamp"
    },
    "unfurl_id": {
      "required": false,
      "example": "Uxxxxxxx-909b5454-75f8-4ac4-b325-1b40e230bbd8",
      "desc": "The ID of the link to unfurl. Both `unfurl_id` and `source` must be provided together, *or* `channel` and `ts` must be provided together.",
      "type": "string"
    },
    "unfurls": {
      "required": true,
      "desc": "URL-encoded JSON map with keys set to URLs featured in the the message, pointing to their unfurl blocks or message attachments.",
      "type": "string",
      "format": "json"
    },
    "user_auth_blocks": {
      "required": false,
      "desc": "Provide a JSON based array of structured blocks presented as URL-encoded string to send as an ephemeral message to the user as invitation to authenticate further and enable full unfurling behavior.",
      "format": "json"
    },
    "user_auth_message": {
      "required": false,
      "desc": "Provide a simply-formatted string to send as an ephemeral message to the user as invitation to authenticate further and enable full unfurling behavior. Provides two buttons, `Not now` or `Never ask me again`.",
      "type": "string"
    },
    "user_auth_required": {
      "required": false,
      "example": "0",
      "desc": "Set to `true` or `1` to indicate the user must install your Slack app to trigger unfurls for this domain.",
      "type": "boolean"
    },
    "user_auth_url": {
      "required": false,
      "example": "https://example.com/onboarding?user_id=xxx",
      "desc": "Send users to this custom URL where they will complete authentication in your app to fully trigger unfurling. Value should be properly URL-encoded.",
      "type": "string"
    }
  },
  "response": {
    "examples": [
      "{\n    \"ok\": true\n}",
      "{\n    \"ok\": false,\n    \"error\": \"cannot_unfurl_url\"\n}"
    ]
  },
  "errors": {
    "cannot_auth_user": "The current user cannot be authenticated.",
    "cannot_find_channel": "The specified channel could not be located for this token.",
    "cannot_find_message": "The `ts` value in the request does not match a message.",
    "cannot_find_service": "A record of your app being allowed to unfurl for this workspace could not be found.",
    "cannot_parse_attachment": "The provided `unfurls` argument could not be parsed or understood.",
    "cannot_prompt": "The current user has already interacted with and dismissed a prompt for this application.",
    "cannot_unfurl_message": "The URL cannot be unfurled because the URL provided does not appear in the message.",
    "cannot_unfurl_url": "The URL cannot be unfurled. This error may be returned if you haven't acknowledged a `link_shared` event tied to the same URL. It is also returned when the domain appears in a workspace's administrative blocklists.",
    "invalid_unfurl_id": "The unfurl ID is invalid.",
    "invalid_unfurls_format": "The `unfurls` parameter cannot be JSON-decoded into a map of URLs to attachments.",
    "invalid_metadata_format": "The `metadata` parameter cannot be JSON-decoded into the expected format.",
    "invalid_source": "The unfurl source is invalid.",
    "missing_channel": "The request is missing the `channel` parameter",
    "missing_source": "The request is missing the `source` parameter.",
    "missing_ts": "The request is missing the `ts` parameter",
    "missing_unfurl_id": "The request is missing the `unfurl_id` parameter.",
    "missing_unfurls": "The request is missing the `unfurls` parameter."
  }
}