{
  "group": "admin",
  "name": "admin.apps.activities.list",
  "deprecated": false,
  "desc": "Get logs for a specified team/org",
  "args": {
    "app_id": {
      "required": false,
      "example": "A12345",
      "desc": "The ID of the app to get activities from."
    },
    "component_id": {
      "required": false,
      "example": "Wf013SMGL4V9",
      "desc": "The component ID of log events to be returned. Will be FnXXXXXX for functions, and WfXXXXXX for workflows.",
      "type": "string"
    },
    "component_type": {
      "required": false,
      "example": "workflows",
      "desc": "The component type of log events to be returned. Acceptable values are events_api, workflows, functions and tables.",
      "type": "string"
    },
    "cursor": {
      "required": false,
      "example": "bG9nX2lkOjc5NjQ1NA==",
      "desc": "Paginate through collections of data by setting the cursor parameter to a next_cursor attribute returned by a previous request's response_metadata. See pagination for more detail.",
      "type": "string"
    },
    "limit": {
      "required": false,
      "example": "100",
      "desc": "The maximum number of items to return.",
      "type": "integer"
    },
    "log_event_type": {
      "required": false,
      "example": "test_log_event",
      "desc": "The event type of log events to be returned.",
      "type": "string"
    },
    "max_date_created": {
      "required": false,
      "example": "1646665572336299",
      "desc": "The latest timestamp of the log to retrieve (epoch microseconds).",
      "type": "integer"
    },
    "min_date_created": {
      "required": false,
      "example": "1646665572336251",
      "desc": "The earliest timestamp of the log to retrieve (epoch microseconds).",
      "type": "integer"
    },
    "min_log_level": {
      "required": false,
      "example": "info",
      "desc": "The minimum log level of the log events to be returned. Defaults to info. Acceptable values (in order of relative importance from smallest to largest) are trace, debug, info, warn, error and fatal.",
      "type": "string"
    },
    "sort_direction": {
      "required": false,
      "example": "asc",
      "desc": "The direction you want the data sorted by (always by timestamp).",
      "type": "enum"
    },
    "source": {
      "required": false,
      "example": "slack",
      "desc": "The source of log events to be returned. Acceptable values are slack and developer.",
      "type": "string"
    },
    "team_id": {
      "required": false,
      "example": "T12345",
      "desc": "The team who owns this log.",
      "type": "string"
    },
    "trace_id": {
      "required": false,
      "example": "Tr432f2",
      "desc": "The trace ID of log events to be returned.",
      "type": "string"
    }
  },
  "response": {
    "examples": [
      "{\n    \"ok\": true,\n    \"activities\": [\n        {\n            \"app_id\": \"A123456789\",\n            \"level\": \"info\",\n            \"event_type\": \"function_execution_started\",\n            \"source\": \"slack\",\n            \"component_type\": \"functions\",\n            \"component_id\": \"Fn123\",\n            \"payload\": {\n                \"function_name\": \"Reverse\",\n                \"function_type\": \"app\"\n            },\n            \"created\": 1650463798824317,\n            \"trace_id\": \"Tr123\"\n        }\n    ],\n    \"response_metadata\": {\n        \"next_cursor\": \"\"\n    }\n}"
    ]
  },
  "errors": {
    "internal_error": "Something went wrong on our end, please try again.",
    "invalid_app_id": "App ID provided is not valid.",
    "invalid_app": "App ID provided is not valid for team and user.",
    "invalid_args": "Required arguments either were not provided or contain invalid values.",
    "invalid_cursor": "Value passed for `cursor` was not valid or is no longer valid.",
    "invalid_team": "Team ID provided is not valid"
  }
}